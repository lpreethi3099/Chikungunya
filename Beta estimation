# Load necessary libraries
library(deSolve)
library(ggplot2)
library(pracma)  # For numerical integration

# Parameters from the data
N <- 72147030  # Total population
I0 <- 1  # Initial number of infected individuals
R0 <- 25251460.5  # Initial number of recovered individuals
S0 <- 46895568.5  # Initial number of susceptible individuals
gamma <- 0.0004  # Recovery rate
target_cumulative_incidence <- 0.0967 * N  # 9.67% of the population infected

# Define a function to calculate the incidence curve and AUC for a given beta
calculate_AUC <- function(beta) {
  
  # Initial conditions vector
  initial_state <- c(S = S0, I = I0, R = R0)
  
  # Time sequence for 6 months (approximately 182 days)
  time <- seq(0, 182, by = 1)  # 182 days (6 months)
  
  # SIR model function
  sir_model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      dS <- -beta * S * I / N
      dI <- beta * S * I / N - gamma * I
      dR <- gamma * I
      list(c(dS, dI, dR))
    })
  }
  
  # Parameters vector
  parameters <- c(beta = beta, gamma = gamma)
  
  # Solve the differential equations
  sir_output <- ode(y = initial_state, times = time, func = sir_model, parms = parameters)
  sir_output <- as.data.frame(sir_output)
  
  # Calculate daily incidence (new infections per day)
  sir_output$Incidence <- -diff(c(sir_output$S, tail(sir_output$S, n = 1)))  # Calculate incidence
  
  # Calculate the AUC (area under the curve)
  AUC <- trapz(time, sir_output$Incidence)
  
  return(AUC)
}

# Define an objective function to minimize the difference between calculated AUC and target cumulative incidence
objective_function <- function(beta) {
  calculated_AUC <- calculate_AUC(beta)
  return(abs(calculated_AUC - target_cumulative_incidence))
}

# Estimate beta using optimization
optimized_beta <- optimize(objective_function, interval = c(0, 1))$minimum

# Print the estimated beta
cat("The estimated beta value is:", optimized_beta, "\n")
